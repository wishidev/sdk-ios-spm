// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WishiSDK
import Foundation
import Swift
import UIKit
@_exported import WishiSDK
import _Concurrency
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class QuizContainerViewController : UIKit.UIViewController, WishiSDK.QuizViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) public var configuration: WishiSDK.Configurations!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public static func show(from presentingController: UIKit.UIViewController, configuration: WishiSDK.Configurations, completion: ((Swift.String?) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public init(completion: ((Swift.String?) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) public func didSelectAnswers(answers: [WishiSDK.WSQuizAnswer])
  @_Concurrency.MainActor(unsafe) public func screenLoaded()
  @_Concurrency.MainActor(unsafe) public func imageSelected(image: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func freeTextHasChanged(text: Swift.String)
  @_Concurrency.MainActor(unsafe) public func checkFinishGroupSelection(quizObject: WishiSDK.WSQuiz)
  @_Concurrency.MainActor(unsafe) public func groupSelected(group: WishiSDK.WSAnswersGroup)
  @_Concurrency.MainActor(unsafe) public func answerSelected(forGroup group: WishiSDK.WSAnswersGroup, controller: WishiSDK.QuizViewController)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func drawDashedLines()
}
@objc public class WSAnswersGroup : ObjectiveC.NSObject {
  public init(dictionary: [Swift.AnyHashable : Any])
  @objc deinit
}
public protocol QuizViewControllerDelegate : AnyObject {
  func didSelectAnswers(answers: [WishiSDK.WSQuizAnswer])
  func freeTextHasChanged(text: Swift.String)
  func imageSelected(image: UIKit.UIImage)
  func groupSelected(group: WishiSDK.WSAnswersGroup)
  func answerSelected(forGroup group: WishiSDK.WSAnswersGroup, controller: WishiSDK.QuizViewController)
  func checkFinishGroupSelection(quizObject: WishiSDK.WSQuiz)
  func screenLoaded()
}
public struct CollectionViewParameters {
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class QuizViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: WishiSDK.QuizViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func initializeView()
  @_Concurrency.MainActor(unsafe) public init(configuration: WishiSDK.Configurations, quizObject: WishiSDK.WSQuiz)
  @_Concurrency.MainActor(unsafe) public func initiateUI()
  @_Concurrency.MainActor(unsafe) public func scrollToBottom()
  @_Concurrency.MainActor(unsafe) public func isOptionSelected(answer: WishiSDK.WSQuizAnswer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isGroupOptionSelected(answerGroup: WishiSDK.WSAnswersGroup) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func addOrRemoveAnswer(answer: WishiSDK.WSQuizAnswer)
  @_Concurrency.MainActor(unsafe) public func addOrRemoveGroup(group: WishiSDK.WSAnswersGroup)
  @_Concurrency.MainActor(unsafe) public func showFreeTextSection() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func createCollection(collectionParameters: WishiSDK.CollectionViewParameters, useLeftAlignedLayout: Swift.Bool, collectionView: inout UIKit.UICollectionView?, controller: WishiSDK.QuizViewController, customInit: (((UIKit.UICollectionView) -> Swift.Void))?)
  @_Concurrency.MainActor(unsafe) public func didSelectOptions(lastSelectedOption: WishiSDK.WSQuizAnswer)
  @objc deinit
}
public enum Enviroment {
  case production
  case development
  case mock
  case local
  public static func == (a: WishiSDK.Enviroment, b: WishiSDK.Enviroment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public class WSQuizAnswer : ObjectiveC.NSObject {
  public init(dictionary: [Swift.AnyHashable : Any])
  @objc deinit
}
public enum ConfigurationStyle {
  case headerFont
  case subheaderFont
  case freeTextHeaderFont
  case quizProgressHeaderFont
  case quizProgressSubheaderFont
  case themeFont
  case themeBoldFont
  case quizProgressHeaderColor
  case quizProgressSubheaderColor
  case headerColor
  case subheaderColor
  case themeColor
  case unselectedBorderColor
  case nextButtonBackgroundColor
  case nextButtonTextColor
  case freeTextCheckedImage
  case uploadPhotoImage
  case checkImage
  case deleteImage
  case closeImage
  case backImage
  public static func == (a: WishiSDK.ConfigurationStyle, b: WishiSDK.ConfigurationStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Configurations {
  public init(configuration: [WishiSDK.ConfigurationStyle : Any])
}
@_hasMissingDesignatedInitializers public class DefaultConfigurations {
  public static func getDefaultConfigurations() -> WishiSDK.Configurations
  @objc deinit
}
@objc public class WSQuiz : ObjectiveC.NSObject {
  public init(dictionary: [Swift.AnyHashable : Any])
  public init(group: WishiSDK.WSAnswersGroup)
  public func showImageScreen() -> Swift.Bool
  public func groupsSelectionHasFinished() -> Swift.Bool
  @objc deinit
}
public enum Gender : Swift.String {
  case male
  case female
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct UserStatus {
  public var lastMessage: Swift.String?
  public var messageCount: Swift.Int?
  public var quizStep: Swift.String?
  public var sessionStatus: Swift.String?
  public var unreadMessageCount: Swift.Int?
  public init(dictionary: [Swift.AnyHashable : Any])
}
public struct ClientInfo {
  public init(firstName: Swift.String, lastName: Swift.String, email: Swift.String, birthday: Swift.String? = nil, phone: Swift.String? = nil, gender: WishiSDK.Gender? = nil)
  public func dictionary() -> [Swift.String : Any]
}
public protocol WishiClientSDKDelegate : AnyObject {
  func didSelectItems(fromController controller: WishiSDK.QuizViewController, quizObject: WishiSDK.WSQuiz, selectedOptions: [WishiSDK.WSQuizAnswer], lastSelectedOption: WishiSDK.WSQuizAnswer)
  func screenSelectionDone(fromController controller: WishiSDK.QuizViewController, quizObject: WishiSDK.WSQuiz, selectedOptions: [WishiSDK.WSQuizAnswer])
}
@_hasMissingDesignatedInitializers public class Wishi : Swift.Identifiable {
  public typealias ClientSDKSuccess = ((Any?) -> Swift.Void)?
  public typealias ClientSDKFailure = ((Swift.Error?, Any?) -> Swift.Void)?
  weak public var delegate: WishiSDK.WishiClientSDKDelegate?
  final public let id: Foundation.UUID
  public static let shared: WishiSDK.Wishi
  public func isMockTesting() -> Swift.Bool
  public func launch(from presentingController: UIKit.UIViewController, completion: (((Swift.Bool) -> Swift.Void))?)
  public func initSDK(clientId: Swift.String, clientInfo: WishiSDK.ClientInfo, apiKey: Swift.String, enviroment: WishiSDK.Enviroment = .development, configuration: WishiSDK.Configurations = DefaultConfigurations.getDefaultConfigurations(), delegate: WishiSDK.WishiClientSDKDelegate)
  public func getUserStatus(success: WishiSDK.Wishi.ClientSDKSuccess, failure: WishiSDK.Wishi.ClientSDKFailure)
  public typealias ID = Foundation.UUID
  @objc deinit
}
extension WishiSDK.Enviroment : Swift.Equatable {}
extension WishiSDK.Enviroment : Swift.Hashable {}
extension WishiSDK.ConfigurationStyle : Swift.Equatable {}
extension WishiSDK.ConfigurationStyle : Swift.Hashable {}
extension WishiSDK.Gender : Swift.Equatable {}
extension WishiSDK.Gender : Swift.Hashable {}
extension WishiSDK.Gender : Swift.RawRepresentable {}
